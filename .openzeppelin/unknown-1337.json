{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x7A93266d62af09d72d7478559BF2cFc982636Bce",
    "txHash": "0xfb080c76b19295de1c382677be6431506fd4a0d384726baff810f9d8aeca89e0"
  },
  "proxies": [
    {
      "address": "0x6a642A4D60b90611E038EcA8B80f988cdfb88cEa",
      "txHash": "0x8ff20c80c20d58e12869a33289c23fd78fb0b96ab8948fc0ee20570db4205b2b",
      "kind": "transparent"
    },
    {
      "address": "0x22B8BB8B05Ee66b799c31fFB380701a03C671efc",
      "txHash": "0xe2f1f43b9058a5ee622f8415ddffee19f7129866117a80e11a957d40031a4c55",
      "kind": "transparent"
    },
    {
      "address": "0x5066d7525D8b08b55665b92227C7b895e86b1f14",
      "txHash": "0xc8d1c9a0e826412c9518d0e1632eb4b70d611064cd5ddca5d31d07797f109916",
      "kind": "transparent"
    },
    {
      "address": "0x9AFa5A89dd896014cD57699E2da21be7b8b24819",
      "txHash": "0x2af818c4822651af7937843e846ad518e0bf9ff6f5f9d75d8f2ad597a7383f6e",
      "kind": "transparent"
    },
    {
      "address": "0xdd65C9C05c1eeB65398E523a9e6bBB906e689b4E",
      "txHash": "0xb4c1e1c27044442d85449473908fb620e1c333e9ea94d61d858da497dbb58d53",
      "kind": "transparent"
    },
    {
      "address": "0xF8Aa135DFF1d34D6C1e43B02B8A8c5CdAA3968e6",
      "txHash": "0x78777ad708080eab02259d091c3303dd11c4c85859207d354a3c02a91017bf8d",
      "kind": "transparent"
    },
    {
      "address": "0x6B738ED0588847e6E018055F74f7E668C22bFEa7",
      "txHash": "0x16ffa456910b474e95542d8b58c32c36eea10a19ef118b978f12c28dc74339fb",
      "kind": "transparent"
    },
    {
      "address": "0xc5aC449685d0381eC7732DDac26B77646e763dDE",
      "txHash": "0x813008ddc84b6cd4cb6c6e95e4c473aa60efd888152ba5987f383d6ce0825a4c",
      "kind": "transparent"
    },
    {
      "address": "0xd1d7D90741552C1AB7439a13859E6E612Cabd28E",
      "txHash": "0x31c8360b9e87831c845af7eebd777544be3199cb26a801a19af72e353dd2eb29",
      "kind": "transparent"
    },
    {
      "address": "0x4E3285cdfEC6135C056d0841Edbbbbe7952a2e44",
      "txHash": "0x1ffbbc65b98f209e5cb21b074961afcb036857d5650a8c773789f22ce09302c0",
      "kind": "transparent"
    },
    {
      "address": "0x6321691319EAf5a3FD4D04a10a4A111Cfa556663",
      "txHash": "0xa00454ce0b8675ae2913db7ba07a7a7268973e8fa57cc6ad0ed1d5de82169a17",
      "kind": "transparent"
    },
    {
      "address": "0xF6D17f581e76dBA3Ac78Af56018CDC61fCe05e48",
      "txHash": "0x962dc6d0ab5acd078952ea7d76e25b758ac7296cea18406dbae34124be4b19d7",
      "kind": "transparent"
    },
    {
      "address": "0x8B7F06692B9C1334D3f25CDaC23363D4bB804329",
      "txHash": "0xc508b03186e967d629451b0594b951c2b42ca2a45a8f324c3d6afcf76ae779b0",
      "kind": "transparent"
    },
    {
      "address": "0x4f982c4d410A980958bF5d319cF8aAeF174E5795",
      "txHash": "0x7e9a7b8c7107b11331d7a3582546b15592b4ac3c82cd21223b5ad9dcaf1a61d4",
      "kind": "transparent"
    },
    {
      "address": "0x3B191AC813fAEee8DD5f79f131AbbD4AA55d8Dd8",
      "txHash": "0xb11fd63e1da21336ea16e8ae7fc81218242902cb0db6bd362c645d91eadbfb19",
      "kind": "transparent"
    },
    {
      "address": "0x8e0213eF8D9b870D21c817722864650391A34529",
      "txHash": "0x5aa362384286ccfdef0abda6af3eab243264361773d65896defdc8b6c3e3c047",
      "kind": "transparent"
    },
    {
      "address": "0xb44E7276cE68561D1ecd7B200D961Cab7b1892FE",
      "txHash": "0x65bdd62d723060369c65a6e81e86cee8566438a39842f52ba9ccb3c33d68d7a9",
      "kind": "transparent"
    },
    {
      "address": "0xEFf8b8A96B1337DA6d4E8Eb48eCB709fBc685Fc5",
      "txHash": "0x25c81c480886c80f32b40dbe798f60641cc860f780e90fb6b0be66cbd49c8092",
      "kind": "transparent"
    },
    {
      "address": "0xaa23Ff3d5677D2E0e567Da91fcc81b681ECD9381",
      "txHash": "0xb4bdd5f4057ad2d4f77497e52996bc55d1bdd4c4616e89ad1a629f144f763b6f",
      "kind": "transparent"
    },
    {
      "address": "0x7E14eef7D86bF3E2212aE803d629B2D566128B3f",
      "txHash": "0x4ed395145b6b21753ef99984f5c8b668bb9a53ae0bb4768d4e9750a6bf9af26e",
      "kind": "transparent"
    },
    {
      "address": "0xC6760539dC1AA3094965EADF14F85359aB254B8a",
      "txHash": "0xd7d047c995a7ab89eb37b7828080245a26e92d27ce5a5142657d42385e5edde0",
      "kind": "transparent"
    },
    {
      "address": "0x46C3F137a42c53D4c461747a4e4Ab60932570Ebb",
      "txHash": "0x9434faa366d4ca7cc868640bef67c3fa22d64b9ac12eb7aff275529d4053f9be",
      "kind": "transparent"
    },
    {
      "address": "0x216136D4B463d5aA1Efed8c853B99A441Ebf65f0",
      "txHash": "0x4eca528efe827289e2dd53d6f0b31f72daed15b18bb89bf898501be296dd4901",
      "kind": "transparent"
    },
    {
      "address": "0x7ACdD1786430726Bb2F43ceA3E3Cb74A243ED6F3",
      "txHash": "0x2dcce21b9c77b39871c17238c69262df7cc02148c00714dc1600ee7830e62a07",
      "kind": "transparent"
    },
    {
      "address": "0x3f2435C50E694CA2e81Da5cB5D295145170Db7b5",
      "txHash": "0xe8dbd58775be95f384cd9a284d0fe4746205009c1b46d409cb14b2c7db2910ab",
      "kind": "transparent"
    },
    {
      "address": "0x5cBCAF667F8b7d7C4aFbEe26B43C5916107f4883",
      "txHash": "0x484034efd13a65f2ffba57a186ad0b53f1fcf9442dbd48c0d6fa3ac9f217ad74",
      "kind": "transparent"
    },
    {
      "address": "0x999D608dFE52049A5b0dA98134B46002693974B7",
      "txHash": "0xe5c6b47fa5564c0e9664b0185d4fe1f5cf3d67815e13d314b8eaf9ea4111242a",
      "kind": "transparent"
    },
    {
      "address": "0x47D13EB08dc222E1cd7F4E28FDAE6e089b6a0820",
      "txHash": "0x69af896311fa0361adf711b534d579de11400534132f71f9f4c0ff3a35197f50",
      "kind": "transparent"
    },
    {
      "address": "0xe097F91e70e077f7179Cdef57EbaAfcDb9A35dCD",
      "txHash": "0x6264a9937c089908d0e96b283ac0829a578cf888c6ef3ad8934f140a30bf8db9",
      "kind": "transparent"
    },
    {
      "address": "0x28421955aB9A221BCf0212F5dEcc4104b6479D21",
      "txHash": "0x1f087246bddb8b0ec5ee8601e2f2fb0843e30f249ae8143f2b9c7e7b63edfaed",
      "kind": "transparent"
    },
    {
      "address": "0xB1e293815A7D8428710cFDdc03cfF696090E9d0C",
      "txHash": "0xe4065c58897ff1182b92f87035ff6d39163908e1596d94911eb04966634287f3",
      "kind": "transparent"
    },
    {
      "address": "0x07ffac1754092110ee635f6C0f2d03a74fa5DD4f",
      "txHash": "0x36ec42abb4eb84f8bc572cbd585c8b653ff9f781dc5b6e1e8490279f8dff2b1b",
      "kind": "transparent"
    },
    {
      "address": "0xDAf9CF735406BB852a9d545E9C9FCdFA4EF55036",
      "txHash": "0x0d0682e9904dbeeb38c1eace576bcb7a690321fe252cf24b57c144ca1f2ca7b0",
      "kind": "transparent"
    },
    {
      "address": "0xC594432516130CCc5565d24011c8587F9E592B63",
      "txHash": "0xd240e61179e3b220818498625c572eb16992350ba85d108f96602a390683f137",
      "kind": "transparent"
    },
    {
      "address": "0x3276E00Db01F0e2433cCe25E1b9F65fD9327344e",
      "txHash": "0x974627dfb250d5d1aef72d965c26a271b66a3739f15081876c2653382074c4a7",
      "kind": "transparent"
    },
    {
      "address": "0x5E9eAd1Fb4868270505176F08A6FBE36B060D6C8",
      "txHash": "0x37cb28c6fb1e73915b3c5837dad1c420936c04c3d099072099501935787717eb",
      "kind": "transparent"
    },
    {
      "address": "0x5A331C50D0aC3B353acE7089d88f38AF774968c6",
      "txHash": "0x93606390bf9bcd2dc428c9088a00d3a7908fe1d6d2697d3e148c79b80804e4ee",
      "kind": "transparent"
    },
    {
      "address": "0xcA70b3897130b594b7A555289d7D129bD146855c",
      "txHash": "0x93c556d47782d18dc8021040384b936ff7612acf782575f3ca2b548c12240012",
      "kind": "transparent"
    },
    {
      "address": "0xde0615081c1BA6850Ff88b25b2c3c87DF2AEfaEE",
      "txHash": "0xa8d80688915b1c574568acd099950f9be179f9703a47035bbe55874cd034957e",
      "kind": "transparent"
    },
    {
      "address": "0x5a61Dc2B7A17EABBfED282A9f1e1413b56C8Cc08",
      "txHash": "0x82d07b4cb80bf7ea9e1f7cd95c16dc4a96ec89b43efa55514d987354cf7c2211",
      "kind": "transparent"
    },
    {
      "address": "0xb8f3A85e708519c931502521A26da1f214b63351",
      "txHash": "0x3607f5b92450ec371a2791e445a272625e03ca4981978725deda66a648a58c56",
      "kind": "transparent"
    },
    {
      "address": "0x92d3094b347423e18046E9E5b4A78ADf30649e2F",
      "txHash": "0xb59a3074322e8ccefe38681353a719fd46a03801184a3c4bd86ca429ec81496b",
      "kind": "transparent"
    },
    {
      "address": "0xD650976cCEeAAE659Cb34e87E16026F67c57bF93",
      "txHash": "0xd595bd3af8b5de3cf2444d10d2ae4f2873fa64d3d95ada89fab3d0c1251feb29",
      "kind": "transparent"
    },
    {
      "address": "0x066835Bf46E3e65a1c95D8Eb4678e285171F9669",
      "txHash": "0xbe86be7e3098eae2bcc0947a99c943dae878caab4741b43580da8f0145baf085",
      "kind": "transparent"
    },
    {
      "address": "0x36957C8281e192F6BCAdBEABA73B0BCef07FBEE2",
      "txHash": "0x40effaa6b93f17508324fa81e4306e4f7314942827d4b195a5923461e8a19e5a",
      "kind": "transparent"
    },
    {
      "address": "0x4e49f68A99231Cfc842FefC142B3BC9E0A7b16e6",
      "txHash": "0x092f0e31b50ac275bb58069d81d3a756f0092ab3685cc1e9158e4f22e33c6c00",
      "kind": "transparent"
    },
    {
      "address": "0xEff460994995E8C4b78658a7c9781cEb0516F5Ca",
      "txHash": "0x9da5dbe126cdf53085c71659bf785a1292bddb016058f140c7dc78ea5289273d",
      "kind": "transparent"
    },
    {
      "address": "0x0878634a9b03249Ce59d59A4a31c5287F54AE9f0",
      "txHash": "0xf7a8c99b3ccd9556ca5264449eaa3be6b254bbdb2d368093cd54df196d7652cb",
      "kind": "transparent"
    },
    {
      "address": "0x3cddaEdbd6fe09Ca4BD7265059DF822518a02e91",
      "txHash": "0x950c68afc0c6adfcf479d9206866c33638ff401968073ae46b7e804ac894b1d1",
      "kind": "transparent"
    },
    {
      "address": "0xb7fc3391435006Bb41C32Fdb411a018E143a4D9C",
      "txHash": "0x713be9f2724ca9a80ca3e6bd54b7a32cbaf30fbdc3b7d96d0bc61c79e60ba308",
      "kind": "transparent"
    },
    {
      "address": "0x58298bdd85631c32185181753cCb7757b36Cd7eC",
      "txHash": "0xf634d5644b6defbd81a4399abca9604d68aed26d21bf953a0ef395fb791b7555",
      "kind": "transparent"
    },
    {
      "address": "0x714649afB8b375CAb94Deee089612E5d3b027144",
      "txHash": "0x05f8e6e3132caf73479ed3529cc0d73ae5bab29e5b1d14296f58c587462b8854",
      "kind": "transparent"
    },
    {
      "address": "0xC868c64cbd1C0537F5Bf8Bc22bc31c595DFf20dA",
      "txHash": "0xb786706b3ab050d65ac00612853ee08fa3120e816af3daf6f7ae761599a390ff",
      "kind": "transparent"
    },
    {
      "address": "0x6B467E285f320506b08991dE0421d45fe1335877",
      "txHash": "0x6c707b0696d80b88f4cfab7be835cad9d17e97da255535ff25083d872fb11f01",
      "kind": "transparent"
    },
    {
      "address": "0x3767fA6D78ebA7B0625030Ac24B80dD0B7E8Ea6A",
      "txHash": "0xc645f9e6620ada9245660387e80866b8d60cd0f336d6b76647983e8f982b64cc",
      "kind": "transparent"
    },
    {
      "address": "0x2f398aD03D83d811F299B32FD1E2dA2F61286C2d",
      "txHash": "0xc4cb3c348668b643a9f9afd76f53d030c0588ec96c755f847ce98986d527dd3a",
      "kind": "transparent"
    },
    {
      "address": "0x976eE54F92C07528c784977dF92CF2c2E4a160b5",
      "txHash": "0x264ca321db0464be4ef277d0c7df6e868b4032a7a94ddb94d8e6c46008197f62",
      "kind": "transparent"
    },
    {
      "address": "0xeD7C17d0999D35a727Abad18e181d5c86Eba8d8d",
      "txHash": "0x62925d129d4ba577c98d193a47fbd2d3fdf2d082d0eaac8dec59c0ed622379df",
      "kind": "transparent"
    },
    {
      "address": "0xC7D48b772e62D31C1208250c4EcD87a4619335d3",
      "txHash": "0x9763a4767bd907ef279743d465adc72d7b148fbaa1726d4f1f946f0eeb08383d",
      "kind": "transparent"
    },
    {
      "address": "0x77E1F22d71AA0F0bB23A88044e9f54CFC7331f6C",
      "txHash": "0x722a523ad6bf20373d0823c07ec4e2a884c0c744ee31aa87a94a2edc5165e062",
      "kind": "transparent"
    },
    {
      "address": "0x59552971aa3D063A76801E06c2b64E2785CEd4AA",
      "txHash": "0x0319d380c36b3c10fdf180792e4a8f0a94b25d799f56cce87e1fa3777385adc3",
      "kind": "transparent"
    },
    {
      "address": "0x228032462bcB3E80e0974ab3ac26db673E330Eba",
      "txHash": "0x5491b5e40b36de5ec8b931ac31c85ddd9e2a73424a0ed1ba0c14354771c3b368",
      "kind": "transparent"
    },
    {
      "address": "0x71e3d78c3156A9F4F4ef13B3cbC23DA51C510984",
      "txHash": "0x1db36a4dbe9a18906363c1f02d2be904c4718283f2a3cda42719450bad48405d",
      "kind": "transparent"
    },
    {
      "address": "0xb2E4E5BB0567e9661CF1199e311008972796f8f9",
      "txHash": "0x63e2165881b5781541bf5697a4c1679de85acfeaf3b015d306035fb62ccea2ed",
      "kind": "transparent"
    },
    {
      "address": "0x99C6F7C6A8B1324f3C21d085a0435F9bD095e8B6",
      "txHash": "0x9ebc605adf13df21ea36cc55499d38798d38d280f3d36611d6ab82735f66aeaa",
      "kind": "transparent"
    },
    {
      "address": "0xCeF8a577BD62Ed4B33abc506d9B29e8756Ad945e",
      "txHash": "0x09b11a652cb29d50ed3ed541c5f05ac80fe16a08174a5fa6152e3ead05eac1bf",
      "kind": "transparent"
    },
    {
      "address": "0x3425F9751c2B734d8670E31c5A723717b23ea9D0",
      "txHash": "0x49664e4811832d518b5daf7c9b061b7242fc2787716f64166d66ab2f4340621c",
      "kind": "transparent"
    },
    {
      "address": "0x71b7D8A8f53525fd48FA59D22bBB75c8112542c9",
      "txHash": "0x7394ade087089f4707fdfc6251ea3782883dca5f2a77f5ccecbcbbc57fe847cc",
      "kind": "transparent"
    },
    {
      "address": "0xFDAE950145E59367306D2a3B2162363E12cE9bEb",
      "txHash": "0xb39dc8f6aac98a467aac150db9baf43915b2d1c5ed3c1e3c2b9c76c380b11fe6",
      "kind": "transparent"
    },
    {
      "address": "0xDcd24767D2ef69ABB97b24711D0AB236075C1cD2",
      "txHash": "0x6ada8b27a901303d90184a853e8380458011467d3f5bed4d4816c759e97634d3",
      "kind": "transparent"
    },
    {
      "address": "0x3Ad644Fbf04c824999e6E94ef0Ff92Bc17A7EF2a",
      "txHash": "0xcde9c7a3706c28c4eebf92cd264fb013e14c37c0e59124e5f7679521b379fb50",
      "kind": "transparent"
    },
    {
      "address": "0xB63506fFe4073d1a8C40D7B3894dF97E599D1955",
      "txHash": "0x28525d1899c98b3ea007e12d749ec9bad4a378bee7a309970b1cc2199a3230ba",
      "kind": "transparent"
    },
    {
      "address": "0x3E3E123F71d3C8B4f4ccae7E643cB5ac289bEcfD",
      "txHash": "0xa5395e0f396c391f0093dc11698af4f05200867e23e5f194b6f44485d2f33c73",
      "kind": "transparent"
    },
    {
      "address": "0x626ba96f3B572A8Ddb1bD1E59CAb5FaB80E7Edda",
      "txHash": "0x1817401e1df54960e5c2a1aaa736b3ecba1ced545f22f6c34a8f03307f67228c",
      "kind": "transparent"
    },
    {
      "address": "0xa134De014376c84f6810666bF42dBD927A998FC2",
      "txHash": "0x806cac53b0e8bff719c698dec6ddf086f85483c7918ebda526f149c1ee200c9d",
      "kind": "transparent"
    },
    {
      "address": "0x86afbeed9E375e6b9ee39aB99A425F32c8482b7E",
      "txHash": "0x73b9e0b5c0068f1089c227de580e7272d89742c4eabaaaddfe4c7c0b6beb9e8e",
      "kind": "transparent"
    },
    {
      "address": "0x9D3c37c3d94Cb57D6DaD143988a5D89233Ba293C",
      "txHash": "0x6c73f92f4a15ee980d3e0bc1357115ffe59eadda6d9e8893d5f54043ce83fdb0",
      "kind": "transparent"
    },
    {
      "address": "0x803600BCdfD8E7284E68dAc83B2F449686E4509c",
      "txHash": "0xafcefb00af03b8b7911f0d2e2391f56887e672ecadd52984cc0af72de90ddcf2",
      "kind": "transparent"
    },
    {
      "address": "0x9818C1727f1f4f207927e336bb8A45698f8305CC",
      "txHash": "0xa5098dea1b2af970cb76ca85d021efa0421c2a2b230cf9b8a21497e1ddf53f53",
      "kind": "transparent"
    },
    {
      "address": "0x9Ef09fd5294152812Fa98cBAEd6B2EA7B9E21845",
      "txHash": "0xc06e0b670465b7d1a11d67f777afa34b12008d6e04105ed055f92661a48b6a99",
      "kind": "transparent"
    },
    {
      "address": "0x1Ccdbf38262F925A0Df1c55422119Dc33D8B5427",
      "txHash": "0x128538e7047ec96bf9bb4bd766508bbf54d8927c1710cebd7b53970627d46269",
      "kind": "transparent"
    },
    {
      "address": "0xB589ddff9505172042FA45331eA322De93A39c5B",
      "txHash": "0xea2663ad230c0e54bd48e223b99e4437a4f4a7d47b37534fefc1835f6159b66a",
      "kind": "transparent"
    },
    {
      "address": "0x3E8E07F8cb0CDb94CCb8360EFF40825B93BeC1e0",
      "txHash": "0x62fec20697c0db0e24b9ab49255178b963e480e6c07847efefa9d1d6ea055bb5",
      "kind": "transparent"
    },
    {
      "address": "0xcc6028e263FE9851b067dA3Bbeb65Dc760BDf57d",
      "txHash": "0x932918353cf2db3165a4dac4e3b7627da484f6273e1bb01c6b8153d5e33aa3a7",
      "kind": "transparent"
    },
    {
      "address": "0x9801BEdE62Fe5B687fD42774D7909f14A2A3B63E",
      "txHash": "0x40130b7b93f69d1844deea9f526e2bb1e756b9fdb745c063c2fc230193650a8f",
      "kind": "transparent"
    },
    {
      "address": "0x4fc4a770Abcb32Dd77e0e68232f13E397CF20fbC",
      "txHash": "0x302d6a4db6179a52b07037fc93e44d6bffcf5cca7a79676e5fc12b78cbd66dad",
      "kind": "transparent"
    },
    {
      "address": "0x26001CA05b06498aD5866cdd50191bF1DEf186f0",
      "txHash": "0xa698b657f0b7c8ba2841e776facd5d38b0b836b16da4cd327d886421b5db7828",
      "kind": "transparent"
    },
    {
      "address": "0x4ecC5AE4A5d96BB456558aeE839A44fCaEF3a608",
      "txHash": "0x79c7c9facabdf2a4b419b8f85aa74572358affae25a1441b8c08a7465d4c13b9",
      "kind": "transparent"
    },
    {
      "address": "0x8ECF7012DCDD65CcBbE7da0a1E491686c86950D9",
      "txHash": "0xbf4032c55e08746c9ac797ba0f3fbcd6dfee5b2ca09cdd370cfe3160ad522373",
      "kind": "transparent"
    },
    {
      "address": "0x455D5d9eB743f0F3d0A987350587D1c21516D93c",
      "txHash": "0x7341a6906444eaaa88f87e5e936eed0eb1bd9d89086404acc9ffae441c51a081",
      "kind": "transparent"
    },
    {
      "address": "0xB0eE4aa7D51B87eaAb48A5Cda84d68B1976fE040",
      "txHash": "0x4b2872daabc69531ff984cb56adfa20b4fdd953720098232b2c7b248a2eb4f76",
      "kind": "transparent"
    },
    {
      "address": "0xDbd70CdeFf87834cc278fE6E06113d4C01FE928e",
      "txHash": "0x5f9aaa1dfe1bb2f46de08ca930e03f93cb6ac14ca48cd09e21b3c7c90a4efa70",
      "kind": "transparent"
    },
    {
      "address": "0x9e8a59f2B794CAEf70fc3364022D448D232F302f",
      "txHash": "0xf3d09adf9ba7febebd154bad9b51ae460b759616880ea26927960d5b272d287f",
      "kind": "transparent"
    },
    {
      "address": "0x19D1A0933B537318ac0988bb490fE8C64027B33F",
      "txHash": "0x12be8e03d3af59fda405075dba76f929591bfcbb34eb6951ddfdcbc276b22c17",
      "kind": "transparent"
    },
    {
      "address": "0x4D5F8d8c774d03E8282d37Eb6edaa87cEf6A5432",
      "txHash": "0x2dd36ffa07ec57c162fb304f5f20c5de08dd6f442f9333143a4dd0d887bc249e",
      "kind": "transparent"
    },
    {
      "address": "0x72Afd249F4D13CbC071Dfc9B531A71bbD8189Ac7",
      "txHash": "0x222bc277b204bf4d409743461a7066c15e9305b43cc1e408e3cce50b0a239570",
      "kind": "transparent"
    },
    {
      "address": "0xcC3EAfD3cCD935147acaaf165B3424882EB9d300",
      "txHash": "0x1594f4733378b38963f184b73475d74789c12c913e9f566f62db1b57d529728b",
      "kind": "transparent"
    },
    {
      "address": "0x0Dd121F461b0eb8aCC81a4fE229423e4299b4250",
      "txHash": "0x2c7a9d1a8aba8f77a73f10e4ebdcd2177c255cf815b3c0e21e673be0c8e46eed",
      "kind": "transparent"
    },
    {
      "address": "0xaE51c573C2D4C1384ED1bB53d8fC10A1fDF4c282",
      "txHash": "0x7b060541898f575b95480c228dee927ec3046f36606f344b0d23ebd0b636a7c3",
      "kind": "transparent"
    },
    {
      "address": "0x10916A316618AF744E1ca72C3643648FDFF71c78",
      "txHash": "0x0838e6c90b763c31ad9f22c57da5efda1080d580825274f6949d9cd77d06cab5",
      "kind": "transparent"
    },
    {
      "address": "0xB3e7Ca15B0DfEAfC0411C1ea2702DB1f73C34bb9",
      "txHash": "0xf803cd52a0efabf2ef2d6c16981972f93bd66cd284d8832294e4c508d8465170",
      "kind": "transparent"
    },
    {
      "address": "0x1A3Cda97fcB17658E88AA06A5Ce5a03802FB6844",
      "txHash": "0x59e4bb4a1d5e3c995408b14b78d234d11065dfa6334e209ed1df6fd1609bf9c5",
      "kind": "transparent"
    },
    {
      "address": "0xcFAEAb9cBb7e5e7cE15b812B344564E64BBf8E9A",
      "txHash": "0x591ce283260b1dfd1c1d513022e461666032a676f748e5c62ddb8991afc15f0b",
      "kind": "transparent"
    },
    {
      "address": "0xdC1a6Ff2b7D5eCA1daE5FA002bB846d58e3bEf72",
      "txHash": "0x42cc5627686014d7d213c2d26b0c4447a7f808b495c5205f7ec98fee141ef7a1",
      "kind": "transparent"
    },
    {
      "address": "0xC616364Fe86f561Cb90116c2219045e91b8c7b8e",
      "txHash": "0xa8fb772c05e3542641ae96f03031911728975d19025ef6df339563ff5f44a776",
      "kind": "transparent"
    },
    {
      "address": "0x8A7e100293Cd6A6503A8E4ef70d68dc3cACE39e4",
      "txHash": "0x7a905dfeb1237c1486d34c63dad78ad1dee0701917d4580dc384e917c9a33b0a",
      "kind": "transparent"
    },
    {
      "address": "0x20B2442c5B64d95b51D72308E91E6acC9d2B4caF",
      "txHash": "0x69c439c22ce636055b8fd7e2a5052827f91cceabd7117128cfcb420a8a63aa79",
      "kind": "transparent"
    },
    {
      "address": "0x70fbe369D298028311D823cdba6B40b8185f9B4b",
      "txHash": "0x0564c8e1408aef1f9c930556cb85e387d009ad08bb45c7f7820b0e25000b7fee",
      "kind": "transparent"
    },
    {
      "address": "0x494C8Aa6FAf8111792EFc4aa46c77Dd4335AB7f5",
      "txHash": "0xbdcaa4307c071b0ca66c016c3d7dac861b42cfb623368fe7ac1b17be617ecdd7",
      "kind": "transparent"
    },
    {
      "address": "0x9808F354E5AEba26e92eD221F18eda998B47a671",
      "txHash": "0x3cc01af5f5f8803d4cc0bb24208f23e05524f6d4c326474ac0d9d2aa569de90f",
      "kind": "transparent"
    },
    {
      "address": "0x576f8E7f395cfE4133A72413B01B65A6Cbbb07Bd",
      "txHash": "0x5c8ecb0547c359dc45afed602818dec12099595349d7a09010c801ddd6607b08",
      "kind": "transparent"
    },
    {
      "address": "0x72FE3f247EB70eC35eb02c2E06D147c307394BC6",
      "txHash": "0xf97f430dc5b21f4e266b7e91b921e4acfea9d3d437d6491a989ba065dff188a9",
      "kind": "transparent"
    },
    {
      "address": "0xC59797bbF6dDe0AFc3eBf08a868fC059Aa4326A9",
      "txHash": "0xbaba21e642316035de04a31aa1ffa85ceb7f883dfbdd2aef25bba41701f34828",
      "kind": "transparent"
    },
    {
      "address": "0x59fBe91b35eF3610ce847b8b2bA13e62E7027e39",
      "txHash": "0x055f907e13484d9b2bd0a9b6f13c399dac1afb345b126bb892c387905d3496b5",
      "kind": "transparent"
    },
    {
      "address": "0x722a23e2D443E4D5A657bC69413A74eD9b59e8FA",
      "txHash": "0xbc5ccc0a1e6b29b0517673a84416621abed80e198330d05615b9445c47971843",
      "kind": "transparent"
    },
    {
      "address": "0xA85f0CbdF8bFBcd1aCAA425934ee4934AdC5e9F2",
      "txHash": "0x5c74fddabfa60ae8ebaa1cc9087b77dc5145c66dbb28f3fb009882803b977ab8",
      "kind": "transparent"
    },
    {
      "address": "0x98c175D3B1D9d816b593f403eE5e52693A3cae2F",
      "txHash": "0x9241a5676fe0b88275b992ff7e48766f38b0cc230027d8415d709c1e5c9cfcc3",
      "kind": "transparent"
    },
    {
      "address": "0x6C4E8764676fDB76a2d47bEcb88f34566283892c",
      "txHash": "0x341bd3799e202344aa0147861268155621277fb39923fe24ec839cc2da03ba5d",
      "kind": "transparent"
    },
    {
      "address": "0x5e26AfD43Ab1eC05B88844dD60381707BeaB1F56",
      "txHash": "0x85861f92534cd01bc13cbf778d33126a5acd8ac162c65124a197f5c205a80f1c",
      "kind": "transparent"
    },
    {
      "address": "0x4b42e049637682049D6C89f100E3ff8D63B503db",
      "txHash": "0x0d6c60881e2fcd512cff7de0547898a593aad7a60c6360976d2e88de40f3c61c",
      "kind": "transparent"
    },
    {
      "address": "0xAEEb93a54344bB28f6b10Be3bAdD3C39E61A537B",
      "txHash": "0x432221cd4ac877ef91be3d7fd0e3bc92fedd2629297de608d02f75ac82cf145d",
      "kind": "transparent"
    },
    {
      "address": "0x7efdC5a6DeF6bB88fee2f8E5B2b1B880d29f3fa2",
      "txHash": "0xfd35f2545d18602135719a4d12dbaa90b6a45b616ba750b4e65d9d92f97ca190",
      "kind": "transparent"
    },
    {
      "address": "0x564d785f07820b496a9E07cA876a3957f56AD407",
      "txHash": "0x0efbc75744d6f353bfa7abe8ddb1b3a683ae9886488b1cd9e2624bb7ac44ceab",
      "kind": "transparent"
    },
    {
      "address": "0xdEe0783E1828081fFaC6A4707a35Ac8eaa9F24Dc",
      "txHash": "0x3dd3674513acdffead5bd04802b3b06c7dd198111b2ee26463ec32a53c68846c",
      "kind": "transparent"
    },
    {
      "address": "0xb7B85BBd4fC3cdF87bD31245A0f307cDCDAe7EE8",
      "txHash": "0x9d0bf24d3e4604c15434a54d675a128cf2abfed52f3a0f593b12e81bb46640fd",
      "kind": "transparent"
    },
    {
      "address": "0xB1E41fA568b3564ab7863Eb04C61a437Dd4C1DE8",
      "txHash": "0x383841fe48c2b4cb3d64418c4fa180c9b950613a9482116096a7d6a68b291805",
      "kind": "transparent"
    },
    {
      "address": "0xA51EBc4F6A5ce77020b27D47c8aF5C88bD8Fc911",
      "txHash": "0xdda850cbf5c12535f77c77df5afc0e05f2a7f77b9d2746a39b5c0a2e00a5a66a",
      "kind": "transparent"
    },
    {
      "address": "0x7E7C3F1340334763245627a71619086f998a572E",
      "txHash": "0xcf55bf02b8c1366db00e52ffb4f17dedcb5cb70bb309575215e456869806d4d3",
      "kind": "transparent"
    }
  ],
  "impls": {
    "63813675c4d58bc5f60354bd6ac6801299780b9cadbe1d669a4234e1195ed3e5": {
      "address": "0x1C4673672F31373A03fe6476d20dd09c3D154eA8",
      "txHash": "0x4b094c991f1388b3a8e1d4df453a1601c802d39eb25531d92cf5fb1119f99c76",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ContextUpgradeable.sol:29"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)3716_storage)",
            "src": "../project:/.coverage_contracts/abstracts/AccessControlUpgradeable.sol:80"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/.coverage_contracts/abstracts/AccessControlUpgradeable.sol:321"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)1161_storage)",
            "src": "../project:/.coverage_contracts/abstracts/AccessControlEnumerableUpgradeable.sol:35"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/AccessControlEnumerableUpgradeable.sol:128"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Upgradeable.sol:46"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Upgradeable.sol:47"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Upgradeable.sol:428"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)4982_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:39"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:42"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:285"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokens",
            "type": "t_mapping(t_contract(IERC20)1466,t_struct(TokenExchangeModel)7277_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:13"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimals",
            "type": "t_mapping(t_contract(IERC20)1466,t_uint8)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:15"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_locks",
            "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)1466,t_uint256))",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:203"
          },
          {
            "contract": "ETHlessTransfer",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ETHlessTransfer.sol:27"
          },
          {
            "contract": "ETHlessTransfer",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ETHlessTransfer.sol:162"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:156"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_contract(IERC20)1466,t_struct(TokenExchangeModel)7277_storage)": {
            "label": "mapping(contract IERC20 => struct GluwacoinModel.TokenExchangeModel)"
          },
          "t_contract(IERC20)1466": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)7277_storage": {
            "label": "struct GluwacoinModel.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_contract(IERC20)1466,t_uint8)": {
            "label": "mapping(contract IERC20 => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_mapping(t_contract(IERC20)1466,t_uint256))": {
            "label": "mapping(address => mapping(contract IERC20 => uint256))"
          },
          "t_mapping(t_contract(IERC20)1466,t_uint256)": {
            "label": "mapping(contract IERC20 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)4982_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)4982_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)4982_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)4968"
              }
            ]
          },
          "t_enum(ReservationStatus)4968": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)1161_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)1161_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)890_storage"
              }
            ]
          },
          "t_struct(Set)890_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)3716_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)3716_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "8d29f55cd8f1996acf496ee25b506a6c4ef42f800b19404ecfe4ce1e338a9d5b": {
      "address": "0xeF61e6D1CDAec864f2A35e3d077076A566Fe4Cc7",
      "txHash": "0x1f0dc6ff8d1c4f907e571c8be6a40abf02c8f8a0b001f4eb61a6bed3c76a755a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ContextUpgradeable.sol:29"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)3716_storage)",
            "src": "../project:/.coverage_contracts/abstracts/AccessControlUpgradeable.sol:80"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/.coverage_contracts/abstracts/AccessControlUpgradeable.sol:321"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)1161_storage)",
            "src": "../project:/.coverage_contracts/abstracts/AccessControlEnumerableUpgradeable.sol:35"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/AccessControlEnumerableUpgradeable.sol:128"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Upgradeable.sol:46"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Upgradeable.sol:47"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Upgradeable.sol:428"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)4982_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:39"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:42"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:285"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokens",
            "type": "t_mapping(t_contract(IERC20)1466,t_struct(TokenExchangeModel)7277_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:13"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimals",
            "type": "t_mapping(t_contract(IERC20)1466,t_uint8)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:15"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_locks",
            "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)1466,t_uint256))",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:203"
          },
          {
            "contract": "ETHlessTransfer",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ETHlessTransfer.sol:27"
          },
          {
            "contract": "ETHlessTransfer",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ETHlessTransfer.sol:162"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:148"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_contract(IERC20)1466,t_struct(TokenExchangeModel)7277_storage)": {
            "label": "mapping(contract IERC20 => struct GluwacoinModel.TokenExchangeModel)"
          },
          "t_contract(IERC20)1466": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)7277_storage": {
            "label": "struct GluwacoinModel.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_mapping(t_contract(IERC20)1466,t_uint8)": {
            "label": "mapping(contract IERC20 => uint8)"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_mapping(t_contract(IERC20)1466,t_uint256))": {
            "label": "mapping(address => mapping(contract IERC20 => uint256))"
          },
          "t_mapping(t_contract(IERC20)1466,t_uint256)": {
            "label": "mapping(contract IERC20 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)4982_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)4982_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)4982_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)4968"
              }
            ]
          },
          "t_enum(ReservationStatus)4968": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)1161_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)1161_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)890_storage"
              }
            ]
          },
          "t_struct(Set)890_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)3716_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)3716_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "43eccfe33d4eeae7966272981720069fa408ba96df5dbed8903428dc09e7af5f": {
      "address": "0x1fD239a675F2122548c0Fc192B50950f0D7109cc",
      "txHash": "0xfaa060a5b2c0fb412f1482b14a9181f6e1956e094558ad5dc46c423782311c54",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5637_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)6723_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)6776_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)6740_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:252"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:183"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)6723_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)6776_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)6760)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)6760)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)6760": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)6740_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)6740_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)6727"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)6723_storage"
              }
            ]
          },
          "t_enum(LockerState)6727": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5637_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5637_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5637_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5623"
              }
            ]
          },
          "t_enum(ReservationStatus)5623": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "6057a4ec2b292f7a5ef1af6d9b3eecbe910143b5c310469f9de8591c5666bcd0": {
      "address": "0xd2320A42DC81603C6BB828E82a758454Bb1dC12c",
      "txHash": "0xe63ab3bbf916f6aad6cd66efaf588c29a17df0f8f6af5002eebd3b9697cebe27",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5637_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)6723_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)6776_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)6740_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:252"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:192"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)6723_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)6776_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)6760)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)6760)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)6760": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)6740_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)6740_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)6727"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)6723_storage"
              }
            ]
          },
          "t_enum(LockerState)6727": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5637_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5637_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5637_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5623"
              }
            ]
          },
          "t_enum(ReservationStatus)5623": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "cb652b3b2df8d9bdcb3c39f38885d9921fe37b71a2f65c231217484fc60dbff4": {
      "address": "0xfC4b8BBC45586d1E37f3C04770aCA036F9FF5E9D",
      "txHash": "0x388c24e7ee5553b0908b25be3ca00d21068524e098377803d297c2738d6db237",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5575_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)6661_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)6714_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)6678_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:251"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:178"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)6661_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)6714_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)6698)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)6698)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)6698": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)6678_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)6678_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)6665"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)6661_storage"
              }
            ]
          },
          "t_enum(LockerState)6665": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5575_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5575_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5575_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5561"
              }
            ]
          },
          "t_enum(ReservationStatus)5561": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "52560e3d3c53179fae3594cab246e2e58adae16ea195744ca732d68aa102d6ca": {
      "address": "0x21b4b44D8784fc9b5181248cec5D09a82C832D31",
      "txHash": "0x121f71b74e1eed702b0de64e5b642b0ab0d97ab2252f3d1146c7f83ab2a2760a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5575_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)6661_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)6714_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)6678_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:251"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)6661_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)6714_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)6698)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)6698)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)6698": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)6678_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)6678_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)6665"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)6661_storage"
              }
            ]
          },
          "t_enum(LockerState)6665": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5575_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5575_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5575_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5561"
              }
            ]
          },
          "t_enum(ReservationStatus)5561": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "85f71c3c6a273177590fec8583ee86ab07ab41ab0874a4eec1bde5ea00b709c9": {
      "address": "0xA2B50890DD9A3Da30CB32E435f6fFa62B7B2A460",
      "txHash": "0x35a3ed5022d6c4ecfadbb8ac46b7c0d4e94da6eea2dfaae033fff6958d8cf539",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5605_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19333_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19386_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19350_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:260"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:178"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19333_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19386_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19370)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19370)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19370": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19350_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19350_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19337"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19333_storage"
              }
            ]
          },
          "t_enum(LockerState)19337": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5605_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5605_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5605_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5591"
              }
            ]
          },
          "t_enum(ReservationStatus)5591": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "2bd7e462ce223530ff0f85433231ebbf7e73731ab8f64c74cf9106403d48a9a5": {
      "address": "0xd71895690B3DC0Dc936a31a915D32C1Bd98DE9DF",
      "txHash": "0x916fa21cadb8004133beafcf218ec0740566833448232c1a037b8f2393c2c85b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5605_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19333_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19386_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19350_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:260"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19333_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19386_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19370)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19370)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19370": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19350_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19350_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19337"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19333_storage"
              }
            ]
          },
          "t_enum(LockerState)19337": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5605_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5605_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5605_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5591"
              }
            ]
          },
          "t_enum(ReservationStatus)5591": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "2a32d9d8cdd3590b8795e8c4cb826dc0006b4e7f211445ec41070914c9b482db": {
      "address": "0x884507CE56f05C9970b0B26eF289338a10a4a61a",
      "txHash": "0x8f1a2497de1d822a0306ebd4ff768f761088cc7d779030642347c13cd368e8a8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5619_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19347_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19400_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19364_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:263"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:178"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19347_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19400_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19384)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19384)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19384": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19364_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19364_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19351"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19347_storage"
              }
            ]
          },
          "t_enum(LockerState)19351": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5619_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5619_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5619_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5605"
              }
            ]
          },
          "t_enum(ReservationStatus)5605": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "d3d9d908639adecf2032ce899d91f163ddd6e89c0092cf9ba8d8c88d4790d982": {
      "address": "0x943f23394888cCaDDe740F9F68E8aa96E3Ec266d",
      "txHash": "0x61d9cea4c79899e4481e03b54479dcc9cf7ed549f50e18c665ed0eb5735450d2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5619_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19347_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19400_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19364_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:263"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19347_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19400_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19384)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19384)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19384": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19364_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19364_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19351"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19347_storage"
              }
            ]
          },
          "t_enum(LockerState)19351": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5619_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5619_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5619_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5605"
              }
            ]
          },
          "t_enum(ReservationStatus)5605": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "e625b3d0ae1811a09a31e167c1024ead1e997c6172fd453fbcaf3f426b1c18a4": {
      "address": "0x9eB63cEb309137A18acfA8BD55836549552e3FE5",
      "txHash": "0xa96039487f5ec3ba17948af0db3b52229178ec41c2541225c551ac4787846fb4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5634_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19362_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19415_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19379_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:263"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:183"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19362_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19415_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19399)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19399)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19399": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19379_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19379_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19366"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19362_storage"
              }
            ]
          },
          "t_enum(LockerState)19366": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5634_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5634_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5634_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5620"
              }
            ]
          },
          "t_enum(ReservationStatus)5620": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "f46f34aac1282f70ed27f5ab51101da654fc3e51e2b7d8a110a30bbcd60257bc": {
      "address": "0xb89DdCaFea6aea6411122A444c1A814145F3bf2f",
      "txHash": "0xac666d5983464d7ce0164772930d34550378b4f42bb4c4fdefc814caa0b81fd4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5634_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19362_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19415_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19379_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:263"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19362_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19415_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19399)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19399)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19399": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19379_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19379_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19366"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19362_storage"
              }
            ]
          },
          "t_enum(LockerState)19366": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5634_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5634_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5634_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5620"
              }
            ]
          },
          "t_enum(ReservationStatus)5620": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "bf679c8218165bb55d2dd71a89e344190a4d380329d85dfd9224a575f90e3764": {
      "address": "0x433951B4a1100B9bc7c8f84309F80B49ea771E53",
      "txHash": "0x7f9ac75c45c0e29aacd29e5bf96cce84351994e8fe16df267d04969db6453903",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5540_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19268_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19321_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19285_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:241"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:183"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19268_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19321_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19305)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19305)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19305": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19285_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19285_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19272"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19268_storage"
              }
            ]
          },
          "t_enum(LockerState)19272": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5540_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5540_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5540_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5526"
              }
            ]
          },
          "t_enum(ReservationStatus)5526": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "b36abcb5c4f2fc5237c8db9e8b3d61a867ef2b0f1292172a2ae181242afff55f": {
      "address": "0xE6eE25eE15Ee7B6776Bd607Edd0eEC9fc5E94531",
      "txHash": "0xd068fb816400d32eae100e6cda786083e32caed92fa295729a985897265c7639",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5540_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19268_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19321_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19285_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:241"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19268_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19321_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19305)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19305)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19305": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19285_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19285_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19272"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19268_storage"
              }
            ]
          },
          "t_enum(LockerState)19272": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5540_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5540_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5540_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5526"
              }
            ]
          },
          "t_enum(ReservationStatus)5526": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "0e9f8fec84f89070dc514010dc012c36442f0f62408ff230b05ad2cb3a922185": {
      "address": "0x62087bBd0045f7c90ac72E7099698833198A312E",
      "txHash": "0x0963baf08a6986248eb28c3c0f1a76a4cc3bbdaf1f5fca21c098a7b3b192568c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5441_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19169_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19222_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19186_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:227"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:183"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19169_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19222_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19206)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19206)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19206": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19186_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19186_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19173"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19169_storage"
              }
            ]
          },
          "t_enum(LockerState)19173": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5441_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5441_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5441_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5427"
              }
            ]
          },
          "t_enum(ReservationStatus)5427": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "a8d0de90f97b6ee3b1423f1500ceabe3c130d451597e83bf4f02b807cdda34de": {
      "address": "0x0Ba571Fcf0f8cE7D29e0D6F93F0DE61C9fC5B877",
      "txHash": "0xc8e4bc4f49586901ca881a828d0b181df2511217a95e0944b3e25acd074e0987",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5441_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19169_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19222_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19186_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:227"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19169_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19222_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19206)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19206)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19206": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19186_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19186_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19173"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19169_storage"
              }
            ]
          },
          "t_enum(LockerState)19173": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5441_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5441_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5441_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5427"
              }
            ]
          },
          "t_enum(ReservationStatus)5427": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "f77ce9336f0e3dfb36d3ac0fcf3daa6de1b217c414c4c1d7c871dc28ac6194b3": {
      "address": "0xea90Af028b3589B4F8e3b824ce851631C128EDc5",
      "txHash": "0x02da86697fda0d98ce11b47b17d0f958238003bca1b5a93f822c7504a72f2667",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5441_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:270"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18902_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18955_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18919_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:227"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:183"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18902_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18955_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18939)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18939)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18939": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18919_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18919_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18906"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18902_storage"
              }
            ]
          },
          "t_enum(LockerState)18906": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5441_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5441_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5441_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5427"
              }
            ]
          },
          "t_enum(ReservationStatus)5427": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "00d3a1cd0f9e856605ae2bcae9ae31cd7d5f9f452133e8e04a985e48578389c6": {
      "address": "0xCbB6B1c8FfCbD7f910405BDa1b9C9cC3339ce647",
      "txHash": "0xb2a140bbe1fda25db47f2cf75bceaf31be429c3842e43ca62a1848ef39d57f94",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5441_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:270"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18902_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18955_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18919_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:227"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:169"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18902_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18955_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18939)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18939)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18939": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18919_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18919_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18906"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18902_storage"
              }
            ]
          },
          "t_enum(LockerState)18906": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5441_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5441_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5441_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5427"
              }
            ]
          },
          "t_enum(ReservationStatus)5427": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "d4e0dc1b2e43f156599e65e09e1aeface241c16e50f9d92bd2e51463a34612bd": {
      "address": "0xDEdaaB6638Cd87a84C82C0a06CE03733122aA485",
      "txHash": "0xa590109811bffcb0390ca64426e5cca71173d9ca2db859f0eb046202a05d7646",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5241_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:270"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18702_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18755_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18719_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:227"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:102"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:183"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18702_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18755_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18739)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18739)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18739": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18719_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18719_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18706"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18702_storage"
              }
            ]
          },
          "t_enum(LockerState)18706": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5241_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5241_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5241_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5227"
              }
            ]
          },
          "t_enum(ReservationStatus)5227": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "b6f14157fa2dea3d79538b4b06932d68aa158c827ef3515cb72e3cbf7fbc1abd": {
      "address": "0x512e0c1853a93c707bE06d800561D06e6DF569B9",
      "txHash": "0x1c1b4e5298cad2d8161b7bce3a9ebe6f82bc44fd3f8596e39bdd950579da5fb4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5241_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:270"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18702_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18755_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18719_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:227"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:102"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18702_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18755_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18739)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18739)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18739": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18719_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18719_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18706"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18702_storage"
              }
            ]
          },
          "t_enum(LockerState)18706": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5241_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5241_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5241_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5227"
              }
            ]
          },
          "t_enum(ReservationStatus)5227": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "37e15dc6d43a29658370501737ed9bad4dacd4be371f7a69c4d457732dc0eb05": {
      "address": "0xD9056f045311566F75deaDe265199997887E1e5c",
      "txHash": "0xa745edf7b9101d1e923942eb6834cd423354e076cbf41a917c10becdf2da24c5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5205_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:270"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18666_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18719_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18683_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:227"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:102"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:171"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18666_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18719_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18703)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18703)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18703": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18683_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18683_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18670"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18666_storage"
              }
            ]
          },
          "t_enum(LockerState)18670": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5205_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5205_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5205_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5191"
              }
            ]
          },
          "t_enum(ReservationStatus)5191": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "ae5627cfcf1e1eb16290f834721fa42d1169d4ef43f2c1831d0771d19071456f": {
      "address": "0xBe704E2B7A0b70f0848e3E4355164797A6B69237",
      "txHash": "0xf20871ac72f31f5725ba70d0c09aac9734b7bc70bd7bc777c54651747eeb9236",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5205_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:270"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18666_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18719_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18683_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:227"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:102"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18666_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18719_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18703)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18703)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18703": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18683_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18683_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18670"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18666_storage"
              }
            ]
          },
          "t_enum(LockerState)18670": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5205_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5205_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5205_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5191"
              }
            ]
          },
          "t_enum(ReservationStatus)5191": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "89beeb43e6ab9117fc0c95767deca39c8db6babd914f54cb8e51d97c83bb5c8a": {
      "address": "0x71E73c2b37dF38F6E55629C562cd772Bc5d3e3A7",
      "txHash": "0x0939e8131bf4d3af22cf82161e2a64e64cd067883b921850cf409a00860b2a21",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5187_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:206"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18373_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18426_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18390_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:227"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:85"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:183"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18373_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18426_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18410)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18410)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18410": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18390_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18390_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18377"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18373_storage"
              }
            ]
          },
          "t_enum(LockerState)18377": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5187_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5187_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5187_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5173"
              }
            ]
          },
          "t_enum(ReservationStatus)5173": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "82ac3130aea0f0d15fb332281bebf0db6c02034c20fa3fdafa6e00499e2137aa": {
      "address": "0xD6b5aCcaB6d42851d8f3244Dd03cB7d6A0CE5f6E",
      "txHash": "0x315c71da9192b7b04b4621165c5115353263d8edc11655d9459d6387b5310476",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5187_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:206"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18373_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18426_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18390_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:227"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:85"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18373_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18426_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18410)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18410)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18410": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18390_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18390_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18377"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18373_storage"
              }
            ]
          },
          "t_enum(LockerState)18377": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5187_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5187_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5187_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5173"
              }
            ]
          },
          "t_enum(ReservationStatus)5173": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "c337284e4123c334e3976b9d184fef4e7d7734e4e107c2bc20a5811b43aa52cf": {
      "address": "0xaA6C77D7959d38452f7c8823CEF05c6A5c0E3F7b",
      "txHash": "0xc9b4eaf7896f666c6d2b31b96bc49e0cb9111e3560c86564f5d2a0bdb02d2b49",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5187_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:129"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18062_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18115_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18079_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:227"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:85"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:183"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18062_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18115_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18099)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18099)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18099": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18079_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18079_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18066"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18062_storage"
              }
            ]
          },
          "t_enum(LockerState)18066": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5187_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5187_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5187_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5173"
              }
            ]
          },
          "t_enum(ReservationStatus)5173": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "df451f2cee31c3fb3ffd7a6570d298826f93d9cc75d9da3afbd8afaed4c11ca2": {
      "address": "0x4c85691489E4555EbF9b3439595D772B6F4d0ccf",
      "txHash": "0xc4dc99dddcd9222357a50b983e252476153ce7cf0497de4db4e2b17e21dd8cb4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5187_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:129"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18062_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18115_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18079_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:227"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:85"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18062_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18115_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18099)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18099)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18099": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18079_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18079_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18066"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18062_storage"
              }
            ]
          },
          "t_enum(LockerState)18066": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5187_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5187_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5187_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5173"
              }
            ]
          },
          "t_enum(ReservationStatus)5173": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "401aaeb5605cabaa096f5df44d85436cec707962dea5fdaffaffbf8fb689f059": {
      "address": "0xDD9Edf49F86Ef30624e75A541C8061F265D4A0Bc",
      "txHash": "0x96aab63b9853be4bb82f433834b218c54932a8b31df28d904a24923c3aabbbeb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5158_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:129"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18033_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18086_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18050_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:223"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:85"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:183"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18033_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18086_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18070)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18070)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18070": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18050_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18050_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18037"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18033_storage"
              }
            ]
          },
          "t_enum(LockerState)18037": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5158_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5158_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5158_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5144"
              }
            ]
          },
          "t_enum(ReservationStatus)5144": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "68a5a98a721f13c82cee0ed7af5e051bc2054b9b15e87f27c1fca0114e6aee08": {
      "address": "0xCeE37E965A5f78Afc01C1885e911eF228C19B065",
      "txHash": "0x3ed7b1ab119666072c5752ef99cc50f50c6081db515ee605d947efcf7d2b225a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5158_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:129"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18033_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18086_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18050_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:223"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:85"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18033_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18086_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18070)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18070)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18070": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18050_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18050_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18037"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18033_storage"
              }
            ]
          },
          "t_enum(LockerState)18037": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5158_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5158_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5158_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5144"
              }
            ]
          },
          "t_enum(ReservationStatus)5144": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "9614aae1094c5916f0f8873bb6b2a8128d95606d441bef1bdc330e21d9b8a27e": {
      "address": "0x29943122AEbd6843cBB25BacfbFeAA90ae3707dB",
      "txHash": "0xf0ad44e77e5f9e3de44f639aae1aa687483ea0f3c152fdf1786ee70a0b6319e3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5247_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:129"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18122_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18175_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18139_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:233"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:85"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:183"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18122_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18175_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18159)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18159)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18159": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18139_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18139_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18126"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18122_storage"
              }
            ]
          },
          "t_enum(LockerState)18126": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5247_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5247_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5247_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5233"
              }
            ]
          },
          "t_enum(ReservationStatus)5233": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "f8d358fa771baf37984cbf949c967e30a7ae1c81d5dbcd96253d2191ccebe75f": {
      "address": "0x368adc600E667b1fb59bE20C6a6D3931e1D579a0",
      "txHash": "0x4bb48a32ca67cece3fb7b23c0840c2535bad7d2be8549717ec602e2a96deed83",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5247_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:129"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)18122_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:20"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)18175_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:22"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)18139_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:25"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:233"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:85"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)18122_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)18175_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)18159)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)18159)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)18159": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)18139_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)18139_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)18126"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)18122_storage"
              }
            ]
          },
          "t_enum(LockerState)18126": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5247_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5247_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5247_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5233"
              }
            ]
          },
          "t_enum(ReservationStatus)5233": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "cbd1cae0042c2708c511914772a3209f610e37d32e2b01494cd310baa37616a6": {
      "address": "0x116a8D431f99F1d05275064F38c943303B4197E0",
      "txHash": "0x88775aa479f9de2015bf13a8124e85d6189e3edbc9e54dd5ea93a380c7ad7241",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5543_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19271_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19324_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19288_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:239"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:159"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:180"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19271_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19324_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19308)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19308)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19308": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19288_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19288_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19275"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19271_storage"
              }
            ]
          },
          "t_enum(LockerState)19275": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5543_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5543_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5543_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5529"
              }
            ]
          },
          "t_enum(ReservationStatus)5529": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "2a1d5972746ee59e695e0ea74b97aa8335780d295b8c90e7f3c7cf15b046b0b2": {
      "address": "0x7E2333a453dE09d8F0Cc74Bc1CBe642D7CC1ec84",
      "txHash": "0x0687b53e08040afa0d9ead96fe26bc267aec621ec150b672ec9a14d155eee406",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5543_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19271_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19324_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19288_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:239"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:159"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19271_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19324_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19308)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19308)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19308": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19288_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19288_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19275"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19271_storage"
              }
            ]
          },
          "t_enum(LockerState)19275": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5543_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5543_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5543_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5529"
              }
            ]
          },
          "t_enum(ReservationStatus)5529": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "b4717c782ba36977e96a4f10849aa718e5d8f3e41bea79ab0e56d68406171a1e": {
      "address": "0x6cf05da00C8aE97a5fED949B33CcbAFdfa8aACeB",
      "txHash": "0x155b6914a891c60f93f2af4a74dd5b9c7097ec1bde69f082dbb8dd9e6749cfd7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5609_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19332_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19385_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19349_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:239"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:159"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:199"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19332_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19385_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19369)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19369)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19369": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19349_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19349_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19336"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19332_storage"
              }
            ]
          },
          "t_enum(LockerState)19336": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5609_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5609_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5609_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5595"
              }
            ]
          },
          "t_enum(ReservationStatus)5595": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "2104a9f7850e1e805f463bf4d6bc26b0612014d02768048e18783861e2d67901": {
      "address": "0x74f5151db17edF0e720d9ce682e0dEA27b054E8D",
      "txHash": "0x6086911665441418c12c189ca0fa3c4f2295c28798c23259ca6c18ab093d3944",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5609_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19332_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19385_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19349_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:239"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:159"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19332_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19385_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19369)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19369)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19369": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19349_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19349_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19336"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19332_storage"
              }
            ]
          },
          "t_enum(LockerState)19336": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5609_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5609_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5609_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5595"
              }
            ]
          },
          "t_enum(ReservationStatus)5595": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "bd8fd1d6f5060759b2f88ef6621e266b6c6678cfd410d2b3760c2715b382a4e7": {
      "address": "0x2F760df8342027bdaf278b8Bc83B93BFC35Cee38",
      "txHash": "0x4ac5f56034d9df2be339007393f2c37a1b9589d0fc5fa34073abc1ee33025647",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5612_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19335_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19388_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19352_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:237"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:159"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:199"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19335_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19388_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19372)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19372)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19372": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19352_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19352_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19339"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19335_storage"
              }
            ]
          },
          "t_enum(LockerState)19339": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5612_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5612_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5612_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5598"
              }
            ]
          },
          "t_enum(ReservationStatus)5598": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "fc70587c967435c5579e6151d6e3685f2803aa485bc5655e0981469301f88d92": {
      "address": "0x641FE054905283F9D0e23daF2d7e8b4669320565",
      "txHash": "0xb8414bc3481aa374d5619d7a00e06bff5a3ecf99cdb512847bde2fce76f32e38",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5612_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19335_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19388_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19352_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:237"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:159"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19335_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19388_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19372)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19372)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19372": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19352_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19352_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19339"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19335_storage"
              }
            ]
          },
          "t_enum(LockerState)19339": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5612_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5612_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5612_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5598"
              }
            ]
          },
          "t_enum(ReservationStatus)5598": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "e6b747d0d153558db5c67b5c6a0b212a714aa45f7a06d7a4803b2a81d5624255": {
      "address": "0x65Be7B187eF0D7CB969CbEc60BF25F72864Fa618",
      "txHash": "0x040a0ddec8b8c5b785b625dbff1ccaea5fe237e7248c247c34eed7a5dbf00933",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5612_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19335_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19388_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19352_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:237"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:159"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:199"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19335_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19388_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19372)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19372)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19372": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19352_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19352_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19339"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19335_storage"
              }
            ]
          },
          "t_enum(LockerState)19339": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5612_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5612_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5612_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5598"
              }
            ]
          },
          "t_enum(ReservationStatus)5598": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "987fe1cefd065c68f3b044e272ccf4639b8694708e4515142477e1c8039c9175": {
      "address": "0xDe50FccEB680a6146e0417fF76e68B7832413C62",
      "txHash": "0xd68ffbf4f30ab29afc6cfb83680c55af4ddf61971a107f571ba867493f6c7728",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5612_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19335_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19388_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19352_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:237"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:159"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19335_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19388_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19372)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19372)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19372": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19352_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19352_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19339"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19335_storage"
              }
            ]
          },
          "t_enum(LockerState)19339": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5612_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5612_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5612_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5598"
              }
            ]
          },
          "t_enum(ReservationStatus)5598": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "4e92df95eb8a2fac6ce298aada8833191cf40d5e2a9c188b7759a8344b655540": {
      "address": "0x4B0cab4d531516a0Ba257C33bD9Cd963d2F552ab",
      "txHash": "0xd87ffecfcf3338e43dd71e80ec5c24b5d809ef9c800f7e6ced4d111536e3d578",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5650_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19373_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19426_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19390_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:249"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:159"
          },
          {
            "contract": "Gluwacoin",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/Gluwacoin.sol:200"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19373_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19426_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19410)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19410)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19410": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19390_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19390_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19377"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19373_storage"
              }
            ]
          },
          "t_enum(LockerState)19377": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5650_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5650_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5650_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5636"
              }
            ]
          },
          "t_enum(ReservationStatus)5636": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    },
    "f15297f239a164b158b887fda66fb7b253009d146ad0a8e9a60d52eeaf5516e1": {
      "address": "0x6e1c7378Dfb72FD35E15613039ACF70746228E1A",
      "txHash": "0x667fcd76ca8b0468abb438160b7d8ef9f7c71606e0cae78dde48f285ca17bc18",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:77"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:33"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:97"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_reserved",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5650_storage))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:40"
          },
          {
            "contract": "ERC20Reservable",
            "label": "_totalReserved",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:43"
          },
          {
            "contract": "ERC20Reservable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20Reservable.sol:302"
          },
          {
            "contract": "Convertible",
            "label": "_baseTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:16"
          },
          {
            "contract": "Convertible",
            "label": "_convertedTokenDecimal",
            "type": "t_uint8",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:17"
          },
          {
            "contract": "Convertible",
            "label": "_baseToken",
            "type": "t_contract(IERC20)2656",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:18"
          },
          {
            "contract": "Convertible",
            "label": "_exchangeRate",
            "type": "t_struct(TokenExchangeModel)19373_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:19"
          },
          {
            "contract": "Convertible",
            "label": "_lockerIndex",
            "type": "t_struct(HashMapping)19426_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:21"
          },
          {
            "contract": "Convertible",
            "label": "_locker",
            "type": "t_mapping(t_bytes32,t_struct(Locker)19390_storage)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:23"
          },
          {
            "contract": "Convertible",
            "label": "_lockerOwner",
            "type": "t_mapping(t_address,t_bytes32)",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:24"
          },
          {
            "contract": "Convertible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/Convertible.sol:249"
          },
          {
            "contract": "ERC20ETHless",
            "label": "_usedNonces",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:26"
          },
          {
            "contract": "ERC20ETHless",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/abstracts/ERC20ETHless.sol:159"
          },
          {
            "contract": "GluwacoinV0",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/.coverage_contracts/GluwacoinV0.sol:176"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IERC20)2656": {
            "label": "contract IERC20"
          },
          "t_struct(TokenExchangeModel)19373_storage": {
            "label": "struct GluwacoinModels.TokenExchangeModel",
            "members": [
              {
                "label": "rate",
                "type": "t_uint32"
              },
              {
                "label": "decimalPlaceBase",
                "type": "t_uint32"
              }
            ]
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_struct(HashMapping)19426_storage": {
            "label": "struct HashMapIndex.HashMapping",
            "members": [
              {
                "label": "hashState",
                "type": "t_mapping(t_bytes32,t_enum(HashState)19410)"
              },
              {
                "label": "itHashMap",
                "type": "t_mapping(t_uint256,t_bytes32)"
              },
              {
                "label": "firstIdx",
                "type": "t_uint256"
              },
              {
                "label": "nextIdx",
                "type": "t_uint256"
              },
              {
                "label": "count",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_enum(HashState)19410)": {
            "label": "mapping(bytes32 => enum HashMapIndex.HashState)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_enum(HashState)19410": {
            "label": "enum HashMapIndex.HashState",
            "members": [
              "Invalid",
              "Active",
              "Archived"
            ]
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_mapping(t_bytes32,t_struct(Locker)19390_storage)": {
            "label": "mapping(bytes32 => struct GluwacoinModels.Locker)"
          },
          "t_struct(Locker)19390_storage": {
            "label": "struct GluwacoinModels.Locker",
            "members": [
              {
                "label": "idx",
                "type": "t_uint256"
              },
              {
                "label": "owner",
                "type": "t_address"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "state",
                "type": "t_enum(LockerState)19377"
              },
              {
                "label": "exchangeRate",
                "type": "t_struct(TokenExchangeModel)19373_storage"
              }
            ]
          },
          "t_enum(LockerState)19377": {
            "label": "enum GluwacoinModels.LockerState",
            "members": [
              "Pending",
              "Active",
              "Withdrawn"
            ]
          },
          "t_mapping(t_address,t_bytes32)": {
            "label": "mapping(address => bytes32)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)5650_storage))": {
            "label": "mapping(address => mapping(uint256 => struct ERC20Reservable.Reservation))"
          },
          "t_mapping(t_uint256,t_struct(Reservation)5650_storage)": {
            "label": "mapping(uint256 => struct ERC20Reservable.Reservation)"
          },
          "t_struct(Reservation)5650_storage": {
            "label": "struct ERC20Reservable.Reservation",
            "members": [
              {
                "label": "_amount",
                "type": "t_uint256"
              },
              {
                "label": "_fee",
                "type": "t_uint256"
              },
              {
                "label": "_recipient",
                "type": "t_address"
              },
              {
                "label": "_executor",
                "type": "t_address"
              },
              {
                "label": "_expiryBlockNum",
                "type": "t_uint256"
              },
              {
                "label": "_status",
                "type": "t_enum(ReservationStatus)5636"
              }
            ]
          },
          "t_enum(ReservationStatus)5636": {
            "label": "enum ERC20Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2351_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_struct(AddressSet)2351_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2080_storage"
              }
            ]
          },
          "t_struct(Set)2080_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)302_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          }
        }
      }
    }
  }
}
